{
  "root": [
    {
      "name": "init",
      "tip": [
        "U: init [options]\n",
        "Create an empty Git repository or reinitialize an existing repository."
      ],
      "options": [
        {
          "name": "-q",
          "alias": [
            "--quiet"
          ],
          "tip": [
            "U: -q|--quiet\n",
            "Only print error and warning messages; all other output will be suppressed."
          ]
        },
        {
          "name": "--bare",
          "tip": [
            "Create a bare repository.\n",
            "If GIT_DIR environment is not set, it is set to the current working directory."
          ]
        },
        {
          "name": "--object-format=",
          "tip": [
            "U: --object-format=<format>\n",
            "Specify the given object <format> (hash algorithm) for the repository.\n",
            "The valid values are sha1 and (if enabled) sha256. sha1 is the default."
          ],
          "next": [
            {
              "name": "sha1"
            },
            {
              "name": "sha256"
            }
          ]
        },
        {
          "name": "--ref-format=",
          "tip": [
            "Specify the given ref storage <format> for the repository."
          ],
          "next": [
            {
              "name": "files",
              "tip": [
                "files for loose files with packed-refs.\n",
                "This is the default."
              ]
            },
            {
              "name": "reftable",
              "tip": [
                "reftable for the reftable format.\n",
                "This format is experimental and its internals are subject to change."
              ]
            }
          ]
        },
        {
          "name": "--template=",
          "tip": [
            "U: --template=<template-directory>\n",
            "Specify a custom template directory for repository initialization."
          ],
          "next": 0
        },
        {
          "name": "--separate-git-dir=",
          "tip": [
            "U: --separate-git-dir=<git-dir>\n",
            "Instead of initializing the repository as a directory to either $GIT_DIR or ./.git/, create a text file there containing the path to the actual repository.\n",
            "This file acts as a filesystem-agnostic Git symbolic link to the repository.\n",
            "If this is a reinitialization, the repository will be moved to the specified path."
          ],
          "next": 0
        },
        {
          "name": "-b",
          "alias": [
            "--initial-branch="
          ],
          "tip": [
            "U: -b <branch-name> | --initial-branch=<branch-name>\n",
            "Use <branch-name> for the initial branch in the newly created repository.\n",
            "If not specified, fall back to the default name."
          ],
          "next": [
            {
              "name": "main"
            },
            {
              "name": "master"
            }
          ]
        },
        {
          "name": "--shared"
        },
        {
          "name": "--shared=",
          "tip": [
            "U: --shared[=(false|true|umask|group|all|world|everybody|<perm>)]\n",
            "Specify that the Git repository is to be shared amongst several users.\n",
            "This allows users belonging to the same group to push into that repository."
          ],
          "next": [
            {
              "name": "umask",
              "alias": [
                "false"
              ],
              "tip": [
                "Use permissions reported by umask.\n",
                "The default, when --shared is not specified."
              ]
            },
            {
              "name": "group",
              "alias": [
                "true"
              ],
              "tip": [
                "Make the repository group-writable, (and g+sx, since the git group may not be the primary group of all users).\n",
                "This is used to loosen the permissions of an otherwise safe umask value."
              ]
            },
            {
              "name": "all",
              "alias": [
                "world",
                "everybody"
              ],
              "tip": [
                "Same as group, but make the repository readable by all users."
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "clone",
      "tip": [
        "Clone a repository into a new directory."
      ],
      "options": [
        {
          "name": "-l",
          "alias": [
            "--local"
          ]
        },
        {
          "name": "--no-hardlinks"
        },
        {
          "name": "-s",
          "alias": [
            "--shared"
          ]
        },
        {
          "name": "--reference"
        },
        {
          "name": "--reference-if-able"
        },
        {
          "name": "--dissociate"
        },
        {
          "name": "-q",
          "alias": [
            "--quiet"
          ]
        },
        {
          "name": "-v",
          "alias": [
            "--verbose"
          ]
        },
        {
          "name": "--progress"
        },
        {
          "name": "--server-option="
        },
        {
          "name": "-n",
          "alias": [
            "--no-checkout"
          ]
        },
        {
          "name": "--reject-shallow"
        },
        {
          "name": "--no-reject-shallow"
        },
        {
          "name": "--bare"
        },
        {
          "name": "--sparse",
          "tip": [
            "Employ a sparse-checkout, with only files in the toplevel directory initially being present."
          ]
        },
        {
          "name": "--filter="
        },
        {
          "name": "--also-filter-submodules"
        },
        {
          "name": "--mirror"
        },
        {
          "name": "-o",
          "alias": [
            "--origin"
          ]
        },
        {
          "name": "-b",
          "tip": [
            "U: -b <branch>\n",
            "Specify the branch to clone.\n",
            "By default, git clone clones the main branch of the remote repository."
          ],
          "next": 0
        },
        {
          "name": "-u",
          "alias": [
            "--upload-pack"
          ]
        },
        {
          "name": "--template="
        },
        {
          "name": "-c",
          "alias": [
            "--config"
          ]
        },
        {
          "name": "--depth",
          "tip": [
            "U: --depth <n>\n",
            "Specify the depth of commit history to clone."
          ],
          "next": [
            {
              "name": "1",
              "tip": [
                "Clone only the latest commit without historical commit records."
              ]
            }
          ]
        },
        {
          "name": "--shallow-since="
        },
        {
          "name": "--shallow-exclude="
        },
        {
          "name": "--single-branch"
        },
        {
          "name": "--no-single-branch"
        },
        {
          "name": "--no-tags"
        },
        {
          "name": "--recurse-submodules"
        },
        {
          "name": "--shallow-submodules"
        },
        {
          "name": "--no-shallow-submodules"
        },
        {
          "name": "--remote-submodules"
        },
        {
          "name": "--no-remote-submodules"
        },
        {
          "name": "--separate-git-dir="
        },
        {
          "name": "--ref-format="
        },
        {
          "name": "-j",
          "alias": [
            "--jobs"
          ],
          "tip": [
            "U: -j <n>\n",
            "Specify the number of threads for parallel cloning to speed up the process."
          ],
          "next": 0
        },
        {
          "name": "--bundle-uri="
        }
      ]
    },
    {
      "name": "add",
      "tip": [
        "Add file changes to the index."
      ],
      "options": [
        {
          "name": ".",
          "tip": [
            "Add all changes in the current directory and its subdirectories (including new, modified, and deleted files) to the index."
          ]
        },
        {
          "name": "-A",
          "alias": [
            "--all"
          ],
          "tip": [
            "U: -A|--all\n",
            "Add all changes in the current working tree (including new, modified, and deleted files) to the index."
          ]
        },
        {
          "name": "-f",
          "alias": [
            "--force"
          ],
          "tip": [
            "U: -f|--force\n",
            "Allow adding ignored files."
          ]
        },
        {
          "name": "-i",
          "alias": [
            "--interactive"
          ],
          "tip": [
            "U: -i|--interactive\n",
            "Interactively add modified content from the working tree to the index."
          ]
        },
        {
          "name": "-p",
          "alias": [
            "--patch"
          ],
          "tip": [
            "U: -p|--patch\n",
            "Interactively choose chunks of content between the index and the working tree to add to the index.\n",
            "Similar to git add -i but skips the initial command menu and goes directly to the patch subcommand."
          ]
        },
        {
          "name": "-e",
          "alias": [
            "--edit"
          ],
          "tip": [
            "U: -e|--edit\n",
            "Open the diff and the index in an editor for further editing."
          ]
        },
        {
          "name": "-u",
          "alias": [
            "--update"
          ],
          "tip": [
            "U: -u|--update\n",
            "It will stage modifications and deletions of tracked files (files already in the Git repository) to the staging area, but it does not stage new files."
          ]
        },
        {
          "name": "--refresh",
          "tip": [
            "Don't add the file(s), but only refresh their stat() information in the index."
          ]
        },
        {
          "name": "--ignore-errors",
          "tip": [
            "If some files could not be added because of errors indexing them, do not abort the operation, but continue adding the others.\n",
            "The command shall still exit with non-zero status.\n",
            "The configuration variable add.ignoreErrors can be set to true to make this the default behaviour."
          ]
        }
      ]
    },
    {
      "name": "commit",
      "tip": [
        "Record changes to the repository."
      ],
      "options": [
        {
          "name": "-m",
          "tip": [
            "U: -m <message>\n",
            "Specify a descriptive message for the commit."
          ],
          "next": 0
        },
        {
          "name": "-a",
          "alias": [
            "--all"
          ],
          "tip": [
            "U: -a|--all\n",
            "Automatically stage changes to tracked files in the index."
          ]
        },
        {
          "name": "-e",
          "alias": [
            "--edit"
          ],
          "tip": [
            "U: -e|--edit\n",
            "Launch an editor to edit the commit message."
          ]
        },
        {
          "name": "--amend",
          "tip": [
            "Modify the message of the last commit(Create a new commit, replacing the last one)"
          ]
        },
        {
          "name": "—allow-empty",
          "tip": [
            "Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit.\n",
            "This option bypasses the safety, and is primarily for use by foreign SCM interface scripts."
          ]
        },
        {
          "name": "--fixup",
          "tip": [
            "Create a new commit which \"fixes up\" <commit> when applied with `git rebase --autosquash.`"
          ],
          "next": []
        },
        {
          "name": "--squash",
          "tip": [
            "Construct a commit message for use with `rebase --autosquash`."
          ],
          "next": []
        },
        {
          "name": "-p",
          "alias": [
            "--patch"
          ],
          "tip": [
            "U: -p|--patch\n",
            "Interactively choose which changes to commit."
          ]
        },
        {
          "name": "-t",
          "tip": [
            "U: -t <file>\n",
            "Get the commit message from the given file and launch an editor for editing."
          ],
          "next": 0
        },
        {
          "name": "-F",
          "tip": [
            "U: -F <file>\n",
            "Get the commit message from the given file."
          ],
          "next": 0
        },
        {
          "name": "-C",
          "tip": [
            "U: -C <commit>\n",
            "Take an existing commit object and reuse the log message and author information when creating a commit (including timestamps)"
          ],
          "next": []
        },
        {
          "name": "--reset-author",
          "tip": [
            "When used with -C/-c/--amend options, or when committing after a conflicting cherry-pick, declare that the authorship of the resulting commit now belongs to the committer.\n",
            "This also renews the author timestamp."
          ]
        },
        {
          "name": "--short",
          "tip": [
            "When doing a dry-run, give the output in the short-format.\n",
            "See https://git-scm.com/docs/git-status for details.\n",
            "Implies `--dry-run`."
          ]
        },
        {
          "name": "--branch",
          "tip": [
            "Show the branch and tracking info even in short-format."
          ]
        },
        {
          "name": "--porcelain",
          "tip": [
            "When doing a dry-run, give the output in a porcelain-ready format.\n",
            "See https://git-scm.com/docs/git-status for details.\n",
            "Implies `--dry-run`."
          ]
        },
        {
          "name": "--long",
          "tip": [
            "When doing a dry-run, give the output in the long-format.\n",
            "Implies `--dry-run`."
          ]
        },
        {
          "name": "-s",
          "alias": [
            "--signoff"
          ]
        },
        {
          "name": "--no-signoff"
        }
      ]
    },
    {
      "name": "push",
      "tip": [
        "Update remote references and associated objects."
      ],
      "options": [
        {
          "name": "--all",
          "tip": [
            "push all branches"
          ]
        }
      ]
    },
    {
      "name": "pull",
      "tip": [
        "Fetch and merge from another repository or local branch."
      ],
      "options": [
        {
          "name": "--all",
          "tip": [
            "fetch from all remotes"
          ]
        },
        {
          "name": "-r",
          "alias": [
            "--rebase"
          ]
        }
      ]
    },
    {
      "name": "fetch",
      "tip": [
        "Download objects and references from another repository."
      ],
      "options": [
        {
          "name": "--all",
          "tip": [
            "fetch from all remotes"
          ]
        }
      ]
    },
    {
      "name": "status",
      "tip": [
        "Show the status of the working tree."
      ],
      "options": [
        {
          "name": "-s",
          "alias": [
            "--short"
          ],
          "tip": [
            "U: -s|--short\n",
            "Show the output in a short format."
          ]
        },
        {
          "name": "-b",
          "alias": [
            "--branch"
          ],
          "tip": [
            "U: -b|--branch\n",
            "Show branch and tracking information, even in short format."
          ]
        },
        {
          "name": "--show-stash",
          "tip": [
            "Show the number of hidden entries in the stash."
          ]
        },
        {
          "name": "-v",
          "alias": [
            "--verbose"
          ],
          "tip": [
            "U: -v|--verbose\n",
            "Show additional text changes to be committed."
          ]
        },
        {
          "name": "-vv",
          "tip": [
            "Show uncommitted changes in the working tree."
          ]
        }
      ]
    },
    {
      "name": "log",
      "tip": [
        "Show commit logs."
      ],
      "options": [
        {
          "name": "-n",
          "tip": [
            "U: -n <n>\n",
            "Show the last n commit messages."
          ],
          "next": 0
        },
        {
          "name": "--graph",
          "tip": [
            "Display branch and merge history in ASCII art alongside the log."
          ]
        },
        {
          "name": "--oneline",
          "tip": [
            "Display each commit message on one line."
          ]
        },
        {
          "name": "--stat",
          "tip": [
            "Show statistics about file modifications in each commit.\n",
            "Each commit lists the modified files, added and removed lines, and a summary of all line changes at the end."
          ]
        },
        {
          "name": "--shortstat",
          "tip": [
            "Show only the summary line for --stat"
          ]
        },
        {
          "name": "-p",
          "tip": [
            "Show each update's differences in patch format, more detailed than --stat"
          ]
        },
        {
          "name": "--name-only",
          "tip": [
            "Show a list of modified files after the commit messages."
          ]
        },
        {
          "name": "--name-status",
          "tip": [
            "Show a list of added, modified, and deleted files."
          ]
        },
        {
          "name": "--abbrev-commit",
          "tip": [
            "Show only the first few characters of the SHA-1 checksum instead of the full 40 characters."
          ]
        },
        {
          "name": "--relative-date",
          "tip": [
            "Display dates in a shorter relative format instead of the full format (e.g. 2 weeks ago)"
          ]
        },
        {
          "name": "--pretty",
          "tip": [
            "Display commit history in a custom format."
          ]
        },
        {
          "name": "--pretty=oneline",
          "tip": [
            "Display each commit message on one line, showing only the hash and commit message."
          ]
        },
        {
          "name": "--pretty=short",
          "tip": [
            "Display hash, Author, and commit info."
          ]
        },
        {
          "name": "--pretty=full",
          "tip": [
            "Display hash, Author, Commit, and commit info."
          ]
        },
        {
          "name": "--pretty=fuller",
          "tip": [
            "Display hash, Author, AuthorDate, Commit, CommitDate, and commit info."
          ]
        },
        {
          "name": "--pretty=format:\"\"",
          "tip": [
            "Control the format of displayed information."
          ]
        }
      ]
    },
    {
      "name": "rebase",
      "tip": [
        "Move local commits to the tip of an updated upstream branch.\n",
        "Used to modify commit history, often to integrate commits from one branch into another."
      ],
      "options": [
        {
          "name": "-i",
          "alias": [
            "--interactive"
          ],
          "tip": [
            "U: -i|--interactive\n",
            "Allows interactive rebase, enabling editing, merging, deleting, and more for each commit."
          ],
          "next": []
        },
        {
          "name": "--onto",
          "tip": [
            "U: --onto <new_base_branch>\n",
            "Specify a new base branch to apply commits from the current branch onto."
          ],
          "next": 0
        },
        {
          "name": "--abort",
          "tip": [
            "Cancel the ongoing rebase operation and return to the state before the rebase started."
          ]
        },
        {
          "name": "--continue",
          "tip": [
            "Continue the rebase operation, typically used after resolving conflicts."
          ]
        },
        {
          "name": "--skip",
          "tip": [
            "Skip the current commit and continue the rebase operation."
          ]
        },
        {
          "name": "--merge",
          "tip": [
            "Merge a branch into the target branch instead of applying commits sequentially."
          ]
        },
        {
          "name": "-x",
          "tip": [
            "U: -x <cmd>\n",
            "Execute a specified command after each commit is applied, useful for automation such as testing and linting."
          ],
          "next": 0
        },
        {
          "name": "-p",
          "tip": [
            "Preserve the structure of merge commits to maintain merge history."
          ]
        }
      ]
    },
    {
      "name": "branch",
      "tip": [
        "List, create, or delete branches."
      ],
      "options": [
        {
          "name": "-a",
          "tip": [
            "List all branches, including local and remote branches."
          ]
        },
        {
          "name": "-d",
          "tip": [
            "U: -d <branch>\n",
            "Delete the specified branch."
          ],
          "next": []
        },
        {
          "name": "-D",
          "tip": [
            "U: -D <branch>\n",
            "Force delete the specified branch."
          ],
          "next": []
        },
        {
          "name": "-m",
          "tip": [
            "U: -m <old_branch> <new_branch>\n",
            "Rename the specified branch."
          ],
          "next": []
        },
        {
          "name": "-M",
          "tip": [
            "U: -M <old_branch> <new_branch>\n",
            "Force rename the specified branch."
          ],
          "next": []
        },
        {
          "name": "-v",
          "tip": [
            "View local branches with their last commit information."
          ]
        },
        {
          "name": "-vv",
          "tip": [
            "View local branches with their last commit information and their relationship to branches and remote branches."
          ]
        }
      ]
    },
    {
      "name": "checkout",
      "tip": [
        "Switch branches or paths in the working tree.\n",
        "E: checkout <branch>           --- Switch branches\n",
        "   checkout <commit_hash>      --- Switch to a specific commit\n",
        "   checkout -b <new_branch>    --- Create and switch to a new branch"
      ],
      "options": [
        {
          "name": "-",
          "tip": [
            "Switch to the previous branch."
          ]
        },
        {
          "name": "-b",
          "tip": [
            "U: -b <new_branch>\n",
            "Create and switch to a new branch"
          ]
        },
        {
          "name": "-B",
          "tip": [
            "U: -B <new_branch>\n",
            "Forcefully create (overwrite if the branch exists) and switch to a branch"
          ]
        },
        {
          "name": "--orphan",
          "tip": [
            "U: --orphan <new_branch>\n",
            "Create a new orphan branch"
          ]
        },
        {
          "name": ".",
          "tip": [
            "Discard all changes in the working directory; the index is preserved."
          ]
        },
        {
          "name": "-f",
          "tip": [
            "Forcefully discard changes in both the index and the working directory."
          ]
        }
      ]
    },
    {
      "name": "switch",
      "tip": [
        "Switch branches."
      ],
      "options": [
        {
          "name": "-c",
          "alias": [
            "--create"
          ],
          "tip": [
            "U: -c|--create <new_branch>\n",
            "Create a new branch and switch to it."
          ]
        },
        {
          "name": "-",
          "tip": [
            "Switch to the previously switched branch."
          ]
        }
      ]
    },
    {
      "name": "merge",
      "tip": [
        "Merge two or more development histories."
      ],
      "options": [
        {
          "name": "--squash",
          "tip": [
            "Compresses the merge result into a single commit and does not preserve the commit history of the source branch.\n",
            "Then you need to specify a new commit message."
          ]
        },
        {
          "name": "--continue",
          "tip": [
            "Continue the current merge operation."
          ]
        },
        {
          "name": "--abort",
          "tip": [
            "Abort the merge and return to the original state."
          ]
        },
        {
          "name": "--quit",
          "tip": [
            "Keep the current conflicts and exit the merge."
          ]
        }
      ]
    },
    {
      "name": "diff",
      "tip": [
        "Display changes between commits, changes between commits and the working tree, and more.\n",
        "E: diff <file>                --- Show differences between the specified file in the working directory and the index.\n",
        "   diff <commit1> <commit2>   --- Compare differences between two commits.\n",
        "   diff <branch1> <branch2>   --- Compare differences between two branches."
      ],
      "options": [
        {
          "name": "--staged",
          "tip": [
            "Compare differences between the index and the latest commit."
          ]
        },
        {
          "name": "--color-words",
          "tip": [
            "Compare word differences between the working directory and the latest commit."
          ]
        }
      ]
    },
    {
      "name": "reflog",
      "tip": [
        "Manage reflog information."
      ],
      "next": [
        {
          "name": "show",
          "tip": [
            "Display the commit history in the reflog."
          ]
        },
        {
          "name": "delete",
          "tip": [
            "Remove entries from the reflog."
          ]
        },
        {
          "name": "expire",
          "tip": [
            "Remove older reflog entries."
          ]
        },
        {
          "name": "exists",
          "tip": [
            "Check if a ref has an associated reflog entry."
          ]
        }
      ]
    },
    {
      "name": "remote",
      "tip": [
        "Manage remote repositories in a Git repository."
      ],
      "next": [
        {
          "name": "add",
          "tip": [
            "Add a new remote repository."
          ]
        },
        {
          "name": "rename",
          "tip": [
            "Rename a remote repository."
          ],
          "options": [
            {
              "name": "--progress",
              "tip": [
                "force progress reporting"
              ]
            }
          ]
        },
        {
          "name": "rm",
          "alias": [
            "remove"
          ],
          "tip": [
            "U: rm|remove <repository>\n",
            "Remove a remote repository."
          ],
          "next": []
        },
        {
          "name": "set-head",
          "tip": [
            "Set the default branch on a remote repository."
          ]
        },
        {
          "name": "set-branches",
          "tip": [
            "Set the list of branches to track on a remote repository."
          ]
        },
        {
          "name": "get-url",
          "tip": [
            "Display the URL of a remote repository."
          ]
        },
        {
          "name": "set-url",
          "tip": [
            "Change the URL of a remote repository."
          ]
        },
        {
          "name": "show",
          "tip": [
            "Display information about remote repositories."
          ]
        },
        {
          "name": "prune",
          "tip": [
            "Remove stale references from remote repositories."
          ]
        },
        {
          "name": "update",
          "tip": [
            "Fetch updates from remote repositories."
          ]
        }
      ],
      "options": [
        {
          "name": "-v",
          "tip": [
            "List the currently configured remote repositories and display their URLs."
          ]
        }
      ]
    },
    {
      "name": "tag",
      "tip": [
        "Create, list, delete, or verify tags with or without GPG signatures.\n",
        "E: tag [-l|--list]   --- List tags\n",
        "   tag v1.0.0        --- Create a tag\n",
        "   tag  -d v1.0.0    --- Delete a tag"
      ],
      "options": [
        {
          "name": "-l",
          "alias": [
            "--list"
          ],
          "tip": [
            "U: -l|--list [pattern]\n",
            "List tags (can use wildcards)\n",
            "E: -l v1.0*"
          ],
          "next": 0
        },
        {
          "name": "-n",
          "tip": [
            "U: -n[num]\n",
            "[num] specifies how many lines from the annotation, if any, are printed when using -l. Implies --list.\n",
            "The default is not to print any annotation lines. If no number is given to -n, only the first line is printed. If the tag is not annotated, the commit message is displayed instead."
          ]
        },
        {
          "name": "-a",
          "alias": [
            "--annotate"
          ],
          "tip": [
            "U: -a|--annotate <tag>\n",
            "Create an annotated tag object.\n",
            "E: -a v1.0.0"
          ],
          "next": 0
        },
        {
          "name": "-d",
          "alias": [
            "--delete"
          ],
          "tip": [
            "U: -d|--delete <tag>\n",
            "Delete tags."
          ],
          "next": []
        },
        {
          "name": "-m"
        },
        {
          "name": "-e"
        },
        {
          "name": "-v",
          "alias": [
            "--verify"
          ],
          "tip": [
            "U: -v|--verify <tag>\n",
            "Verify tags"
          ],
          "next": []
        }
      ]
    },
    {
      "name": "config",
      "tip": [
        "Retrieve and configure repository or global options."
      ],
      "next": [
        {
          "name": "user.name",
          "tip": [
            "Configure the username.\n",
            "E: [--global] user.name xxx"
          ]
        },
        {
          "name": "user.email",
          "tip": [
            "Configure the email.\n",
            "E: [--global] user.email xxx@outlook.com"
          ]
        },
        {
          "name": "init.defaultBranch"
        },
        {
          "name": "core.editor",
          "tip": [
            "Configure the default editor."
          ],
          "next": [
            {
              "name": "\"code --wait\"",
              "tip": [
                "Configure the default editor as vscode."
              ]
            },
            {
              "name": "vim",
              "tip": [
                "Configure the default editor as vim."
              ]
            },
            {
              "name": "nvim",
              "tip": [
                "Configure the default editor as nvim."
              ]
            },
            {
              "name": "notepad",
              "tip": [
                "Configure the default editor as Notepad (Microsoft Notepad)."
              ]
            }
          ]
        },
        {
          "name": "core.ignorecase",
          "tip": [
            "Configure the case-sensitivity of file names.\n",
            "The default is false, except git-clone or git-init will probe and set core.ignoreCase true if appropriate when the repository is created."
          ],
          "next": [
            {
              "name": "false"
            },
            {
              "name": "true"
            }
          ]
        },
        {
          "name": "https.proxy",
          "tip": [
            "Configure the Git https proxy.\n",
            "E: [--global] https.proxy 127.0.0.1:10810   --- Set proxy\n",
            "   [--global] --unset https.proxy           --- Unset proxy"
          ]
        },
        {
          "name": "user.signingkey",
          "tip": [
            "Configure the GPG signing key."
          ]
        },
        {
          "name": "gpg.program",
          "tip": [
            "Configure the GPG program path."
          ]
        },
        {
          "name": "commit.gpgsign",
          "tip": [
            "Configure whether to sign commits with GPG."
          ],
          "next": [
            {
              "name": "true",
              "tip": [
                "Sign commits with GPG."
              ]
            },
            {
              "name": "false",
              "tip": [
                "Don't sign commits with GPG."
              ]
            }
          ]
        },
        {
          "name": "commit.template",
          "tip": [
            "Configure the default commit template.\n",
            "E: [--global] commit.template ~/.gitmessage"
          ]
        },
        {
          "name": "color.ui",
          "tip": [
            "Configure the command auto-coloring."
          ],
          "next": [
            {
              "name": "true",
              "tip": [
                "Enable command auto-coloring configuration."
              ]
            },
            {
              "name": "false",
              "tip": [
                "Disable command auto-coloring configuration."
              ]
            }
          ]
        },
        {
          "name": "color.status",
          "tip": [
            "Configure the auto-coloring for the status command."
          ],
          "next": [
            {
              "name": "auto",
              "tip": [
                "Default value.\n",
                "Automatically determine whether to enable color display based on terminal support."
              ]
            },
            {
              "name": "always",
              "tip": [
                "Always enable color display, regardless of terminal support."
              ]
            },
            {
              "name": "never",
              "tip": [
                "Never enable color display, even if the terminal supports it."
              ]
            }
          ]
        },
        {
          "name": "color.diff",
          "tip": [
            "Configure the auto-coloring for the diff command."
          ],
          "next": [
            {
              "name": "auto",
              "tip": [
                "Default value.\n",
                "Automatically determine whether to enable color display based on terminal support."
              ]
            },
            {
              "name": "always",
              "tip": [
                "Always enable color display, regardless of terminal support."
              ]
            },
            {
              "name": "never",
              "tip": [
                "Never enable color display, even if the terminal supports it."
              ]
            }
          ]
        },
        {
          "name": "color.branch",
          "tip": [
            "Configure the auto-coloring for the branch command."
          ],
          "next": [
            {
              "name": "auto",
              "tip": [
                "Default value.\n",
                "Automatically determine whether to enable color display based on terminal support."
              ]
            },
            {
              "name": "always",
              "tip": [
                "Always enable color display, regardless of terminal support."
              ]
            },
            {
              "name": "never",
              "tip": [
                "Never enable color display, even if the terminal supports it."
              ]
            }
          ]
        },
        {
          "name": "color.interactive",
          "tip": [
            "Configure the auto-coloring for the -i (interactive) command."
          ],
          "next": [
            {
              "name": "auto",
              "tip": [
                "Default value.\n",
                "Automatically determine whether to enable color display based on terminal support."
              ]
            },
            {
              "name": "always",
              "tip": [
                "Always enable color display, regardless of terminal support."
              ]
            },
            {
              "name": "never",
              "tip": [
                "Never enable color display, even if the terminal supports it."
              ]
            }
          ]
        }
      ],
      "options": [
        {
          "name": "--global",
          "tip": [
            "Perform global settings."
          ]
        },
        {
          "name": "-e",
          "alias": [
            "--edit"
          ],
          "tip": [
            "U: -e|--edit\n",
            "Edit the configuration for the current repository."
          ]
        },
        {
          "name": "--unset",
          "tip": [
            "Remove config.\n",
            "E: [--global] --unset user.name"
          ],
          "next": [
            {
              "name": "user.name",
              "tip": [
                "Remove config --- the username."
              ]
            },
            {
              "name": "user.email",
              "tip": [
                "Remove config --- the email."
              ]
            },
            {
              "name": "core.editor",
              "tip": [
                "Remove config --- the default editor."
              ]
            },
            {
              "name": "https.proxy",
              "tip": [
                "Remove config --- the Git https proxy."
              ]
            },
            {
              "name": "user.signingkey",
              "tip": [
                "Remove config --- the GPG signing key."
              ]
            },
            {
              "name": "gpg.program",
              "tip": [
                "Remove config --- the GPG program path."
              ]
            },
            {
              "name": "commit.gpgsign",
              "tip": [
                "Remove config --- whether to sign commits with GPG."
              ]
            },
            {
              "name": "commit.template",
              "tip": [
                "Remove config --- the default commit template."
              ]
            },
            {
              "name": "color.ui",
              "tip": [
                "Remove config --- the command auto-coloring."
              ]
            },
            {
              "name": "color.status",
              "tip": [
                "Remove config --- the auto-coloring for the status command."
              ]
            },
            {
              "name": "color.diff",
              "tip": [
                "Remove config --- the auto-coloring for the diff command."
              ]
            },
            {
              "name": "color.branch",
              "tip": [
                "Remove config --- the auto-coloring for the branch command."
              ]
            },
            {
              "name": "color.interactive",
              "tip": [
                "Remove config --- the auto-coloring for the -i (interactive) command."
              ]
            }
          ]
        },
        {
          "name": "--get",
          "tip": [
            "Get config value (Usually can be omitted)\n",
            "E: [--global] [--get] user.name"
          ]
        }
      ]
    },
    {
      "name": "stash",
      "tip": [
        "Stash changes in the stash.\n",
        "Note: When there're multiple stashes, they're ordered from newest to oldest, and the index is starting from 0.\n",
        "      If the index is omitted, the first stash is operated by default. (stash@{0})"
      ],
      "next": [
        {
          "name": "list",
          "tip": [
            "List all stashes."
          ]
        },
        {
          "name": "show",
          "tip": [
            "U: show [<index>]\n",
            "To show other stashes, specify an index.\n",
            "index: Represents the index of the stash, starting from 0.\n",
            "E: show 1   --- Show the second stash. (stash@{1})"
          ],
          "options": [
            {
              "name": "-p",
              "alias": [
                "--patch"
              ],
              "tip": [
                "Show the diff of the stash."
              ]
            }
          ]
        },
        {
          "name": "pop",
          "tip": [
            "U: pop [<index>]\n",
            "Apply and remove changes from the stash.\n",
            "The difference from 'apply' is that 'pop' removes the stash after applying.\n",
            "E: pop 1   --- Pop the second stash. (stash@{1})"
          ],
          "next": []
        },
        {
          "name": "apply",
          "tip": [
            "U: apply [<index>]\n",
            "Apply changes from the stash.\n",
            "The difference from 'pop' is that 'apply' doesn't remove the stash.\n",
            "E: apply 1   --- Apply the second stash. (stash@{1})"
          ],
          "next": []
        },
        {
          "name": "push",
          "tip": [
            "Stash changes (equivalent to 'git stash')."
          ],
          "options": [
            {
              "name": "-m",
              "tip": [
                "Specify a descriptive message for this stash.\n",
                "E: -m \"Remark\" (equivalent to 'git stash -m \"Remark\"')"
              ],
              "next": 0
            }
          ]
        },
        {
          "name": "drop",
          "tip": [
            "U: drop [<index>]\n",
            "Remove a single stash.\n",
            "E: drop 1   ---  Remove the second stash. (stash@{1})"
          ],
          "next": []
        },
        {
          "name": "clear",
          "tip": [
            "Clear the stash."
          ]
        }
      ],
      "options": [
        {
          "name": "-m",
          "tip": [
            "Specify a descriptive message for this stash.\n",
            "E: -m \"Remark\""
          ],
          "next": 0
        }
      ]
    },
    {
      "name": "reset",
      "tip": [
        "Reset the current HEAD to a specified commit."
      ],
      "options": [
        {
          "name": "--soft",
          "tip": [
            "Move HEAD to a specified commit, keeping changes in both the working directory and the staging area (index)."
          ],
          "next": []
        },
        {
          "name": "--mixed",
          "tip": [
            "Default behavior: Move HEAD to a specified commit and move changes from both the working directory and the staging area to the working directory."
          ],
          "next": []
        },
        {
          "name": "--hard",
          "tip": [
            "Move HEAD to a specified commit and remove all changes, including those in the working directory and the index. Be cautious, as this is irreversible."
          ],
          "next": []
        }
      ]
    },
    {
      "name": "cherry",
      "tip": [
        "Find commits in the local commit list that have not been pushed to the remote and display their hash values."
      ],
      "options": [
        {
          "name": "-v",
          "tip": [
            "Display hash values and commit messages."
          ]
        }
      ]
    },
    {
      "name": "cherry-pick",
      "tip": [
        "Pick a specified commit from another branch and apply it to the current branch.\n",
        "E: cherry-pick <commit1>             ---  Pick commit1\n",
        "   cherry-pick <commit1..commit2>    ---  Pick all commits between commit1 and commit2 (excluding commit1)\n",
        "   cherry-pick <commit1^..commit2>   ---  Pick all commits between commit1 and commit2 (including commit1)"
      ],
      "options": [
        {
          "name": "--continue",
          "tip": [
            "Continue the merge (you should have resolved conflicts before using this command)."
          ]
        },
        {
          "name": "--abort",
          "tip": [
            "Abort the cherry-pick operation and return to the original state."
          ]
        },
        {
          "name": "--quit",
          "tip": [
            "Keep the current conflicts and exit the cherry-pick."
          ]
        }
      ]
    },
    {
      "name": "rm",
      "tip": [
        "Delete the specified file from the working directory and stage the deletion."
      ],
      "options": [
        {
          "name": "-f",
          "tip": [
            "Forcefully delete the specified file from the working directory, even if it has been modified and staged."
          ]
        },
        {
          "name": "--cached",
          "tip": [
            "Stop tracking the specified file (remove the specified file from the index), but keep it in the working directory."
          ]
        }
      ]
    },
    {
      "name": "mv",
      "tip": [
        "Move or rename a file, directory, or symbolic link, and stage the change."
      ],
      "options": [
        {
          "name": "-f",
          "tip": [
            "Forcefully move or rename a file, directory, or symbolic link, and stage the change."
          ]
        }
      ]
    },
    {
      "name": "show",
      "tip": [
        "Show information related to the current commit and changes to files\n",
        "E: show                 --- Show HEAD\n",
        "   show <commit_hash>   --- Show the commit"
      ],
      "next": []
    },
    {
      "name": "shortlog",
      "tip": [
        "Summarize Git log output."
      ]
    },
    {
      "name": "show-branch",
      "tip": [
        "Display branches and their commits."
      ]
    },
    {
      "name": "revert",
      "tip": [
        "U: revert <commit-hash>\n",
        "Undo changes made by a specified commit (creates a new commit)."
      ],
      "next": []
    },
    {
      "name": "annotate",
      "alias": [
        "blame"
      ],
      "tip": [
        "Display authorship and last modification commit information for each line in a file, along with the line's content"
      ]
    },
    {
      "name": "format-patch",
      "tip": [
        "Create patches, where N represents how many patches to generate (one patch per commit).\n",
        "E: format-patch -2   ---  Generate two patch files (xxx.patch) from the latest two commits."
      ]
    },
    {
      "name": "am",
      "tip": [
        "Apply patches."
      ],
      "options": [
        {
          "name": "--show-current-patch=diff",
          "tip": [
            "View failed patches."
          ]
        },
        {
          "name": "--continue",
          "alias": [
            "--resolved"
          ],
          "tip": [
            "U: --continue|--resolved\n",
            "Continue applying patches (you should have resolved conflicts before using this command)."
          ]
        },
        {
          "name": "--skip",
          "tip": [
            "Skip this patch."
          ]
        },
        {
          "name": "--abort",
          "tip": [
            "Abort applying patches and restore the original state."
          ]
        }
      ]
    },
    {
      "name": "apply",
      "tip": [
        "Apply patches to files and/or the index."
      ],
      "options": [
        {
          "name": "--reject",
          "tip": [
            "U: --reject <patch_file>\n",
            "Automatically merge non-conflicting code changes from the patch while generating conflicting content as xxx.rej files."
          ],
          "next": 0
        }
      ]
    },
    {
      "name": "clean",
      "tip": [
        "Remove untracked files from the working tree."
      ]
    },
    {
      "name": "count-objects",
      "tip": [
        "Count unpacked objects and display their disk usage."
      ],
      "options": [
        {
          "name": "-H",
          "alias": [
            "--human-readable"
          ],
          "tip": [
            "U: -H|--human-readable\n",
            "Print sizes in human-readable format."
          ]
        },
        {
          "name": "-v",
          "alias": [
            "--verbose"
          ],
          "tip": [
            "U: -v|--verbose\n",
            "Also report the number of packed objects and objects that can be removed."
          ]
        }
      ]
    },
    {
      "name": "flow",
      "tip": [
        "Manage branches and development workflows."
      ],
      "next": [
        {
          "name": "init",
          "tip": [
            "Initialize a new Git repository with a branching model."
          ]
        },
        {
          "name": "feature",
          "tip": [
            "Manage feature branches."
          ]
        },
        {
          "name": "bugfix",
          "tip": [
            "Manage bugfix branches."
          ]
        },
        {
          "name": "release",
          "tip": [
            "Manage release branches."
          ]
        },
        {
          "name": "hotfix",
          "tip": [
            "Manage hotfix branches."
          ]
        },
        {
          "name": "support",
          "tip": [
            "Manage support branches."
          ]
        },
        {
          "name": "version",
          "tip": [
            "Display version information."
          ]
        },
        {
          "name": "config",
          "tip": [
            "Manage Git-flow configuration."
          ]
        },
        {
          "name": "log",
          "tip": [
            "Display logs that don't match the base branch."
          ]
        }
      ]
    },
    {
      "name": "lfs",
      "tip": [
        "Work with large files in Git repositories."
      ],
      "next": [
        {
          "name": "checkout",
          "tip": [
            "Populate working copy with real content from Git LFS files."
          ]
        },
        {
          "name": "completion",
          "tip": [
            "Generate shell scripts for command-line tab-completion of Git LFS commands."
          ],
          "next": [
            {
              "name": "bash"
            },
            {
              "name": "fish"
            },
            {
              "name": "zsh"
            }
          ]
        },
        {
          "name": "dedup",
          "tip": [
            "De-duplicate Git LFS files."
          ]
        },
        {
          "name": "env",
          "tip": [
            "Display the Git LFS environment."
          ]
        },
        {
          "name": "ext",
          "tip": [
            "Display Git LFS extension details."
          ]
        },
        {
          "name": "fetch",
          "tip": [
            "Download Git LFS files from a remote."
          ]
        },
        {
          "name": "fsck",
          "tip": [
            "Check Git LFS files for consistency."
          ]
        },
        {
          "name": "install",
          "tip": [
            "Install Git LFS configuration."
          ]
        },
        {
          "name": "lock",
          "tip": [
            "Set a file as \"locked\" on the Git LFS server."
          ]
        },
        {
          "name": "locks",
          "tip": [
            "List currently \"locked\" files from the Git LFS server."
          ]
        },
        {
          "name": "logs",
          "tip": [
            "Show errors from the Git LFS command."
          ]
        },
        {
          "name": "ls-files",
          "tip": [
            "Show information about Git LFS files in the index and working tree."
          ]
        },
        {
          "name": "migrate",
          "tip": [
            "Migrate history to or from Git LFS."
          ]
        },
        {
          "name": "prune",
          "tip": [
            "Delete old Git LFS files from local storage."
          ]
        },
        {
          "name": "pull",
          "tip": [
            "Fetch Git LFS changes from the remote & checkout any required working tree files."
          ]
        },
        {
          "name": "push",
          "tip": [
            "Push queued large files to the Git LFS endpoint."
          ]
        },
        {
          "name": "status",
          "tip": [
            "Show the status of Git LFS files in the working tree."
          ]
        },
        {
          "name": "track",
          "tip": [
            "View or add Git LFS paths to Git attributes."
          ]
        },
        {
          "name": "uninstall",
          "tip": [
            "Uninstall Git LFS by removing hooks and smudge/clean filter configuration."
          ]
        },
        {
          "name": "unlock",
          "tip": [
            "Remove \"locked\" setting for a file on the Git LFS server."
          ]
        },
        {
          "name": "untrack",
          "tip": [
            "Remove Git LFS paths from Git Attributes."
          ]
        },
        {
          "name": "update",
          "tip": [
            "Update Git hooks for the current Git repository."
          ]
        },
        {
          "name": "version",
          "tip": [
            "Report the version number."
          ]
        }
      ]
    },
    {
      "name": "prune",
      "tip": [
        "Remove all unreachable objects from the object database."
      ]
    },
    {
      "name": "grep",
      "tip": [
        "Print lines matching a pattern."
      ]
    },
    {
      "name": "gc",
      "tip": [
        "Clean unnecessary files and optimize the local repository."
      ]
    },
    {
      "name": "archimport",
      "tip": [
        "Import an Arch repository into Git."
      ]
    },
    {
      "name": "archive",
      "tip": [
        "Create a file archive from a named tree."
      ]
    },
    {
      "name": "bisect",
      "tip": [
        "Find changes introducing errors using binary search."
      ],
      "next": [
        {
          "name": "bad",
          "tip": [
            "Mark the current or given revision as bad."
          ]
        },
        {
          "name": "good",
          "tip": [
            "Mark the current or given revision as good."
          ]
        },
        {
          "name": "help",
          "tip": [
            "Display help messages."
          ]
        },
        {
          "name": "log",
          "tip": [
            "Display the log of the current bisection."
          ]
        },
        {
          "name": "next",
          "tip": [
            "Find and check out the next revision to test."
          ]
        },
        {
          "name": "new",
          "tip": [
            "Mark the current or given revision as new, indicating a good state."
          ]
        },
        {
          "name": "old",
          "tip": [
            "Mark the current or given revision as old, indicating a bad state."
          ]
        },
        {
          "name": "replay",
          "tip": [
            "Replay the bisect log."
          ]
        },
        {
          "name": "reset",
          "tip": [
            "Finish the bisect and return to the given branch."
          ]
        },
        {
          "name": "run",
          "tip": [
            "Run the evaluation script."
          ]
        },
        {
          "name": "skip",
          "tip": [
            "Choose the nearby commit."
          ]
        },
        {
          "name": "start",
          "tip": [
            "Reset the bisect state and start a new bisect."
          ]
        },
        {
          "name": "terms",
          "tip": [
            "Display the terms used for old and new commits (default is bad, good)."
          ],
          "next": [
            {
              "name": "--term-good",
              "tip": [
                "Change the terms used for old and new commits (default is good)."
              ]
            },
            {
              "name": "--term-bad",
              "tip": [
                "Change the terms used for old and new commits (default is bad)."
              ]
            }
          ]
        },
        {
          "name": "view",
          "tip": [
            "Display the remaining revisions in gitk."
          ]
        },
        {
          "name": "visualize",
          "tip": [
            "Display the remaining revisions in gitk."
          ]
        }
      ]
    },
    {
      "name": "bugreport",
      "tip": [
        "Collect information for user-submitted bug reports."
      ],
      "options": [
        {
          "name": "-o",
          "alias": [
            "--output-directory"
          ],
          "tip": [
            "U: -o|--output-directory <path>\n",
            "Specify the target location for the bugreport files."
          ],
          "next": 0
        },
        {
          "name": "-s",
          "alias": [
            "--suffix"
          ],
          "tip": [
            "U: -s|--suffix <suffix>\n",
            "Specify a strftime format suffix for the filenames."
          ],
          "next": 0
        }
      ]
    },
    {
      "name": "bundle",
      "tip": [
        "Move objects and references via archive."
      ],
      "next": [
        {
          "name": "create",
          "tip": [
            "Create a bundle."
          ]
        },
        {
          "name": "list-heads",
          "tip": [
            "List references defined in the bundle."
          ]
        },
        {
          "name": "unbundle",
          "tip": [
            "Unpack a bundle into a repository."
          ]
        },
        {
          "name": "verify",
          "tip": [
            "Check if a bundle is valid and can be cleanly applied."
          ]
        }
      ]
    },
    {
      "name": "cat-file",
      "tip": [
        "Show content or type information of repository objects."
      ]
    },
    {
      "name": "check-attr",
      "tip": [
        "Display gitattributes information."
      ]
    },
    {
      "name": "check-ignore",
      "tip": [
        "Debug .gitignore/.gitexclude files."
      ]
    },
    {
      "name": "check-mailmap",
      "tip": [
        "Display canonical names and email addresses of contacts."
      ],
      "options": [
        {
          "name": "--stdin",
          "tip": [
            "Read one contact per line from standard input."
          ]
        }
      ]
    },
    {
      "name": "checkout-index",
      "tip": [
        "Copy files from the index to the working directory."
      ]
    },
    {
      "name": "check-ref-format",
      "tip": [
        "Ensure reference names are well-formed."
      ]
    },
    {
      "name": "citool",
      "tip": [
        "Graphical alternative to Git commit."
      ]
    },
    {
      "name": "commit-graph",
      "tip": [
        "Write and verify Git commit graph files."
      ]
    },
    {
      "name": "commit-tree",
      "tip": [
        "Create a new commit object."
      ]
    },
    {
      "name": "difftool",
      "tip": [
        "Display changes using common diff tools."
      ]
    },
    {
      "name": "daemon",
      "tip": [
        "Run a very simple Git repository server."
      ]
    },
    {
      "name": "describe",
      "tip": [
        "Display the most recent tag reachable from a commit."
      ]
    },
    {
      "name": "diff-files",
      "tip": [
        "Compare files between the working tree and the index."
      ]
    },
    {
      "name": "diff-index",
      "tip": [
        "Compare the contents and modes of blobs between the index and the repository."
      ]
    },
    {
      "name": "diff-tree",
      "tip": [
        "Compare the contents and modes of blobs found via two tree objects."
      ]
    },
    {
      "name": "fast-export",
      "tip": [
        "Data exporter."
      ]
    },
    {
      "name": "fast-import",
      "tip": [
        "Directly import information into Git."
      ]
    },
    {
      "name": "fetch-pack",
      "tip": [
        "Receive missing objects from another repository."
      ]
    },
    {
      "name": "filter-branch",
      "tip": [
        "Rewrite branches."
      ]
    },
    {
      "name": "fmt-merge-msg",
      "tip": [
        "Generate a merge commit message."
      ]
    },
    {
      "name": "for-each-ref",
      "tip": [
        "Output information on each reference."
      ]
    },
    {
      "name": "for-each-repo",
      "tip": [
        "Run Git command on a group of repositories."
      ]
    },
    {
      "name": "fsck",
      "tip": [
        "Verify the connectivity and validity of objects in the database."
      ]
    },
    {
      "name": "get-tar-commit-id",
      "tip": [
        "Extract commit ID from an archive created using git archive."
      ]
    },
    {
      "name": "gui",
      "tip": [
        "Portable graphical interface for Git."
      ]
    },
    {
      "name": "hash-object",
      "tip": [
        "Compute object ID and optionally create a blob from a file."
      ]
    },
    {
      "name": "help",
      "tip": [
        "Display help information about Git."
      ]
    },
    {
      "name": "http-backend",
      "tip": [
        "Run the server-side implementation for Git repositories."
      ]
    },
    {
      "name": "http-fetch",
      "tip": [
        "Download from a remote Git repository over HTTP."
      ]
    },
    {
      "name": "http-push",
      "tip": [
        "Push objects to another repository over HTTP/DAV."
      ]
    },
    {
      "name": "imap-send",
      "tip": [
        "Send a collection of patches to an IMAP folder."
      ]
    },
    {
      "name": "index-pack",
      "tip": [
        "Build pack index file for an existing packed archive."
      ]
    },
    {
      "name": "instaweb",
      "tip": [
        "Instantly browse working repository in gitweb."
      ]
    },
    {
      "name": "interpret-trailers",
      "tip": [
        "Add or parse structured information in commit messages."
      ]
    },
    {
      "name": "ls-files",
      "tip": [
        "Show information about files in the index and working directory."
      ]
    },
    {
      "name": "ls-remote",
      "tip": [
        "List references in a remote repository."
      ]
    },
    {
      "name": "ls-tree",
      "tip": [
        "List the contents of a tree object."
      ]
    },
    {
      "name": "mailinfo",
      "tip": [
        "Extract patch and authorship from a single email message."
      ]
    },
    {
      "name": "mailsplit",
      "tip": [
        "Split an mbox file into a list of files."
      ]
    },
    {
      "name": "maintenance",
      "tip": [
        "Run tasks to optimize Git repository data."
      ]
    },
    {
      "name": "merge-base",
      "tip": [
        "Find common ancestors as merge bases as cheaply as possible."
      ]
    },
    {
      "name": "merge-file",
      "tip": [
        "Run a three-way file merge."
      ]
    },
    {
      "name": "merge-index",
      "tip": [
        "Run a merge for files needing merging."
      ]
    },
    {
      "name": "merge-one-file",
      "tip": [
        "Common core of 'git merge-index' and standard helper for use with git merge-index."
      ]
    },
    {
      "name": "mergetool",
      "tip": [
        "Run merge conflict resolution tools to resolve merge conflicts."
      ]
    },
    {
      "name": "merge-tree",
      "tip": [
        "Show three-way merge without touching the index."
      ]
    },
    {
      "name": "mktag",
      "tip": [
        "Create a tag object with optional verification."
      ]
    },
    {
      "name": "mktree",
      "tip": [
        "Build a tree-object from ls-tree formatted text."
      ]
    },
    {
      "name": "multi-pack-index",
      "tip": [
        "Write and verify multi-pack-indexes."
      ]
    },
    {
      "name": "notes",
      "tip": [
        "Add or inspect object notes."
      ],
      "next": [
        {
          "name": "add",
          "tip": [
            "Add notes to an object."
          ]
        },
        {
          "name": "append",
          "tip": [
            "Append notes to an existing object."
          ]
        },
        {
          "name": "copy",
          "tip": [
            "Copy notes from one object to another."
          ]
        },
        {
          "name": "edit",
          "tip": [
            "Edit notes of an existing object."
          ]
        },
        {
          "name": "get-ref",
          "tip": [
            "Get the reference to notes on an object."
          ]
        },
        {
          "name": "list",
          "tip": [
            "List notes on an object."
          ]
        },
        {
          "name": "merge",
          "tip": [
            "Merge notes from one object into another."
          ]
        },
        {
          "name": "prune",
          "tip": [
            "Prune notes from the object database."
          ]
        },
        {
          "name": "remove",
          "tip": [
            "Remove notes from an object."
          ]
        },
        {
          "name": "show",
          "tip": [
            "Show notes on an object."
          ]
        }
      ]
    },
    {
      "name": "name-rev",
      "tip": [
        "Find symbolic names for given refs."
      ]
    },
    {
      "name": "pack-objects",
      "tip": [
        "Create a packed archive of objects."
      ]
    },
    {
      "name": "pack-redundant",
      "tip": [
        "Find redundant pack files."
      ]
    },
    {
      "name": "pack-refs",
      "tip": [
        "Pack heads and tags for efficient repository access."
      ]
    },
    {
      "name": "parse-remote",
      "tip": [
        "Routine to help parse remote repository access parameters."
      ]
    },
    {
      "name": "patch-id",
      "tip": [
        "Compute unique ID for a patch."
      ]
    },
    {
      "name": "prune-packed",
      "tip": [
        "Remove extra objects that are already in pack files."
      ]
    },
    {
      "name": "quiltimport",
      "tip": [
        "Apply a quilt patchset."
      ]
    },
    {
      "name": "rerere",
      "tip": [
        "Reuse recorded resolution of conflicted merges."
      ],
      "next": [
        {
          "name": "clear",
          "tip": [
            "Clear the rerere database."
          ]
        },
        {
          "name": "forget",
          "tip": [
            "Forget about conflicts resolved."
          ]
        },
        {
          "name": "diff",
          "tip": [
            "Show conflict diff."
          ]
        },
        {
          "name": "remaining",
          "tip": [
            "Show remaining conflicts."
          ]
        },
        {
          "name": "status",
          "tip": [
            "Show the status of the rerere cache."
          ]
        },
        {
          "name": "gc",
          "tip": [
            "Garbage collect the rerere database."
          ]
        }
      ]
    },
    {
      "name": "restore",
      "tip": [
        "Restore working tree files."
      ]
    },
    {
      "name": "range-diff",
      "tip": [
        "Compare two commit ranges."
      ]
    },
    {
      "name": "read-tree",
      "tip": [
        "Reads tree information into the index."
      ]
    },
    {
      "name": "receive-pack",
      "tip": [
        "Receive what is pushed into the repository."
      ]
    },
    {
      "name": "repack",
      "tip": [
        "Pack unpacked objects in a repository."
      ]
    },
    {
      "name": "replace",
      "tip": [
        "Create, list, delete refs to replace objects."
      ]
    },
    {
      "name": "request-pull",
      "tip": [
        "Generates a summary of pending changes."
      ]
    },
    {
      "name": "rev-list",
      "tip": [
        "List commit objects in reverse chronological order."
      ]
    },
    {
      "name": "rev-parse",
      "tip": [
        "Pick out and massage parameters and messages from Git."
      ]
    },
    {
      "name": "send-email",
      "tip": [
        "Send a collection of patches as emails."
      ]
    },
    {
      "name": "send-pack",
      "tip": [
        "Push objects over Git protocol to another repository."
      ]
    },
    {
      "name": "shell",
      "tip": [
        "Restricted login shell for Git-only SSH access."
      ]
    },
    {
      "name": "show-index",
      "tip": [
        "Show packed archive index."
      ]
    },
    {
      "name": "show-ref",
      "tip": [
        "List references in a local repository."
      ]
    },
    {
      "name": "sparse-checkout",
      "tip": [
        "Initialize and modify the sparse-checkout."
      ]
    },
    {
      "name": "stripspace",
      "tip": [
        "Filter out empty lines."
      ]
    },
    {
      "name": "submodule",
      "tip": [
        "Initialize, update, or inspect submodules."
      ],
      "next": [
        {
          "name": "add",
          "tip": [
            "Add a new submodule to the current project."
          ]
        },
        {
          "name": "status",
          "tip": [
            "Show the status of submodules in the current project."
          ]
        },
        {
          "name": "init",
          "tip": [
            "Initialize submodules for the current project."
          ]
        },
        {
          "name": "deinit",
          "tip": [
            "Un-initialize submodules for the current project."
          ]
        },
        {
          "name": "update",
          "tip": [
            "Update submodules in the current project."
          ]
        },
        {
          "name": "summary",
          "tip": [
            "Show submodule summary status."
          ]
        },
        {
          "name": "foreach",
          "tip": [
            "Run a command in each submodule."
          ]
        },
        {
          "name": "sync",
          "tip": [
            "Synchronize submodules' remote URL configuration."
          ]
        }
      ]
    },
    {
      "name": "subtree",
      "tip": [
        "Split a repository into subtrees and merge them."
      ]
    },
    {
      "name": "svn",
      "tip": [
        "Perform bidirectional operations between Subversion(SVN) repositories and Git."
      ],
      "next": [
        {
          "name": "init",
          "tip": [
            "Initialize a Git repository for Subversion(SVN) integration."
          ]
        },
        {
          "name": "fetch",
          "tip": [
            "Fetch revisions from a Subversion(SVN) repository."
          ]
        },
        {
          "name": "clone",
          "tip": [
            "Clone a Subversion(SVN) repository into Git."
          ]
        },
        {
          "name": "rebase",
          "tip": [
            "Rebase the current branch onto SVN commits."
          ]
        },
        {
          "name": "dcommit",
          "tip": [
            "Commit Git changes to a Subversion(SVN) repository."
          ]
        },
        {
          "name": "log",
          "tip": [
            "Show Subversion(SVN) commit logs."
          ]
        },
        {
          "name": "find-rev",
          "tip": [
            "Find the SVN revision corresponding to a Git commit."
          ]
        },
        {
          "name": "set-tree",
          "tip": [
            "Set the current Git tree to be equivalent to an SVN checkout."
          ]
        },
        {
          "name": "commit-diff",
          "tip": [
            "Commit changes from Git diffs to Subversion(SVN)."
          ]
        },
        {
          "name": "info",
          "tip": [
            "Display information about the Subversion(SVN) repository."
          ]
        },
        {
          "name": "create-ignore",
          "tip": [
            "Create ignore files from Subversion(SVN) properties."
          ]
        },
        {
          "name": "propget",
          "tip": [
            "Get Subversion(SVN) properties from the repository."
          ]
        },
        {
          "name": "proplist",
          "tip": [
            "List Subversion(SVN) properties."
          ]
        },
        {
          "name": "show-ignore",
          "tip": [
            "Show ignore patterns from Subversion(SVN) properties."
          ]
        },
        {
          "name": "show-externals",
          "tip": [
            "Show Subversion(SVN) externals definitions."
          ]
        },
        {
          "name": "branch",
          "tip": [
            "Create a new branch in a Subversion(SVN) repository."
          ]
        },
        {
          "name": "tag",
          "tip": [
            "Create a new tag in a Subversion(SVN) repository."
          ]
        },
        {
          "name": "blame",
          "tip": [
            "Show blame annotations from a Subversion(SVN) repository."
          ]
        },
        {
          "name": "migrate",
          "tip": [
            "Migrate an SVN repository to Git."
          ]
        },
        {
          "name": "mkdirs",
          "tip": [
            "Create directories in a Subversion(SVN) repository."
          ]
        },
        {
          "name": "reset",
          "tip": [
            "Reset the current branch to the last fetched state."
          ]
        },
        {
          "name": "gc",
          "tip": [
            "Perform maintenance operations on a Git-SVN repository."
          ]
        }
      ]
    },
    {
      "name": "symbolic-ref",
      "tip": [
        "Read and modify symbolic references."
      ]
    },
    {
      "name": "update-git-for-windows",
      "tip": [
        "Update Git for Windows."
      ]
    },
    {
      "name": "unpack-file",
      "tip": [
        "Create a temporary file containing blob content."
      ]
    },
    {
      "name": "unpack-objects",
      "tip": [
        "Unpack objects from a packed repository archive."
      ]
    },
    {
      "name": "update-index",
      "tip": [
        "Register file contents in the index."
      ]
    },
    {
      "name": "update-ref",
      "tip": [
        "Safely update the object name stored in a reference."
      ]
    },
    {
      "name": "update-server-info",
      "tip": [
        "Update auxiliary info files to help the server."
      ]
    },
    {
      "name": "upload-archive",
      "tip": [
        "Send an archive back to git-archive."
      ]
    },
    {
      "name": "upload-pack",
      "tip": [
        "Send packed objects back to git fetch-pack."
      ]
    },
    {
      "name": "version",
      "tip": [
        "Display Git version information."
      ]
    },
    {
      "name": "var",
      "tip": [
        "Display Git logical variables."
      ]
    },
    {
      "name": "verify-commit",
      "tip": [
        "Check GPG signature of commits."
      ]
    },
    {
      "name": "verify-pack",
      "tip": [
        "Verify packed Git archive files."
      ]
    },
    {
      "name": "verify-tag",
      "tip": [
        "Check GPG signature of tags."
      ]
    },
    {
      "name": "whatchanged",
      "tip": [
        "Show commit logs with differences introduced."
      ]
    },
    {
      "name": "worktree",
      "tip": [
        "Manage multiple working directories attached to the same repository."
      ],
      "next": [
        {
          "name": "add",
          "tip": [
            "Add a new working tree to the current repository."
          ]
        },
        {
          "name": "list",
          "tip": [
            "List all working trees in the current repository."
          ]
        },
        {
          "name": "lock",
          "tip": [
            "Lock the current working tree to prevent concurrent access."
          ]
        },
        {
          "name": "move",
          "tip": [
            "Move or rename a working tree in the current repository."
          ]
        },
        {
          "name": "prune",
          "tip": [
            "Remove empty directories from the working tree."
          ]
        },
        {
          "name": "remove",
          "tip": [
            "Remove a working tree from the current repository."
          ]
        },
        {
          "name": "unlock",
          "tip": [
            "Unlock the current working tree to allow concurrent access."
          ]
        },
        {
          "name": "checkout",
          "tip": [
            "Checkout a branch into a working tree."
          ]
        },
        {
          "name": "reset",
          "tip": [
            "Reset a working tree to a specific state."
          ]
        },
        {
          "name": "merge",
          "tip": [
            "Merge a branch into a working tree."
          ]
        },
        {
          "name": "rebase",
          "tip": [
            "Rebase a branch onto another branch in the working tree."
          ]
        },
        {
          "name": "status",
          "tip": [
            "Show the status of a working tree."
          ]
        }
      ]
    }
  ],
  "options": [
    {
      "name": "--version",
      "alias": [
        "-v"
      ],
      "tip": [
        "Prints the Git suite version that the git program came from.\n",
        "If --help is also given, it takes precedence over --version."
      ]
    },
    {
      "name": "-C",
      "tip": [
        "U: -C <path>\n",
        "Run as if git was started in <path> instead of the current working directory.\n",
        "If <path> is present but empty, e.g. -C \"\", then the current working directory is left unchanged."
      ],
      "next": 0
    },
    {
      "name": "-c",
      "tip": [
        "U: -c <name>=<value>\n",
        "Pass a configuration parameter to the command. The value given will override values from configuration files.\n",
        "The <name> is expected in the same format as listed by git config (subkeys separated by dots)."
      ],
      "next": 0
    },
    {
      "name": "--exec-path",
      "tip": [
        "U: --exec-path[=<path>]\n",
        "Path to wherever your core Git programs are installed.\n",
        "This can also be controlled by setting the GIT_EXEC_PATH environment variable.\n",
        "If no path is given, git will print the current setting and then exit."
      ],
      "next": 0
    },
    {
      "name": "--html-path",
      "tip": [
        "Print the path, without trailing slash, where Git's HTML documentation is installed and exit."
      ]
    },
    {
      "name": "--man-path",
      "tip": [
        "Print the manpath for the man pages for this version of Git and exit."
      ]
    },
    {
      "name": "--info-path",
      "tip": [
        "Print the path where the Info files documenting this version of Git are installed and exit."
      ]
    },
    {
      "name": "-p",
      "alias": [
        "--paginate"
      ],
      "tip": [
        "Pipe all output into less (or if set, $PAGER) if standard output is a terminal.\n",
        "This overrides the pager.<cmd> configuration options."
      ]
    },
    {
      "name": "-P",
      "alias": [
        "--no-pager"
      ],
      "tip": [
        "Do not pipe Git output into a pager."
      ]
    },
    {
      "name": "--git-dir=",
      "tip": [
        "U: --git-dir=<path>\n",
        "Set the path to the repository (\".git\" directory).\n",
        "This can also be controlled by setting the GIT_DIR environment variable.\n",
        "It can be an absolute path or relative path to current working directory."
      ],
      "next": 0
    },
    {
      "name": "--work-tree=",
      "tip": [
        "U: --work-tree=<path>\n",
        "Set the path to the working tree. It can be an absolute path or a path relative to the current working directory.\n",
        "This can also be controlled by setting the GIT_WORK_TREE environment variable and the core.worktree configuration variable"
      ],
      "next": 0
    },
    {
      "name": "--namespace=",
      "tip": [
        "U: --namespace=<path>\n",
        "Set the Git namespace.\n",
        "Equivalent to setting the GIT_NAMESPACE environment variable."
      ],
      "next": 0
    },
    {
      "name": "--bare",
      "tip": [
        "Treat the repository as a bare repository.\n",
        "If GIT_DIR environment is not set, it is set to the current working directory."
      ]
    },
    {
      "name": "--no-replace-objects",
      "tip": [
        "Do not use replacement refs to replace Git objects.\n",
        "This is equivalent to exporting the GIT_NO_REPLACE_OBJECTS environment variable with any value."
      ]
    },
    {
      "name": "--no-lazy-fetch",
      "tip": [
        "Do not fetch missing objects from the promisor remote on demand.\n",
        "Useful together with git cat-file -e <object> to see if the object is locally available.\n",
        "This is equivalent to setting the GIT_NO_LAZY_FETCH environment variable to 1."
      ]
    },
    {
      "name": "--no-optional-locks",
      "tip": [
        "Do not perform optional operations that require locks.\n",
        "This is equivalent to setting the GIT_OPTIONAL_LOCKS to 0."
      ]
    },
    {
      "name": "--no-advice",
      "tip": [
        "Disable all advice hints from being printed."
      ]
    },
    {
      "name": "--literal-pathspecs",
      "tip": [
        "Treat pathspecs literally (i.e. no globbing, no pathspec magic).\n",
        "This is equivalent to setting the GIT_LITERAL_PATHSPECS environment variable to 1."
      ]
    },
    {
      "name": "--glob-pathspecs",
      "tip": [
        "Add \"glob\" magic to all pathspec.\n",
        "This is equivalent to setting the GIT_GLOB_PATHSPECS environment variable to 1.\n",
        "Disabling globbing on individual pathspecs can be done using pathspec magic \":(literal)\""
      ]
    },
    {
      "name": "--noglob-pathspecs",
      "tip": [
        "Add \"literal\" magic to all pathspec.\n",
        "This is equivalent to setting the GIT_NOGLOB_PATHSPECS environment variable to 1.\n",
        "Enabling globbing on individual pathspecs can be done using pathspec magic \":(glob)\""
      ]
    },
    {
      "name": "--icase-pathspecs",
      "tip": [
        "Add \"icase\" magic to all pathspec. \n",
        "This is equivalent to setting the GIT_ICASE_PATHSPECS environment variable to 1."
      ]
    },
    {
      "name": "--list-cmds=",
      "tip": [
        "U: --list-cmds=<group>[,<group>…​]\n",
        "List commands by group.\n",
        "This is an internal/experimental option and may change or be removed in the future."
      ],
      "next": 0
    },
    {
      "name": "--attr-source=",
      "tip": [
        "U: --attr-source=<tree-ish>\n",
        "Read gitattributes from <tree-ish> instead of the worktree.\n",
        "This is equivalent to setting the GIT_ATTR_SOURCE environment variable."
      ],
      "next": 0
    }
  ],
  "common_options": [
    {
      "name": "--help",
      "alias": [
        "-h"
      ],
      "tip": [
        "U: --help|-h\n",
        "Prints the synopsis and a list of the most commonly used commands.\n",
        "If the option --all or -a is given then all available commands are printed.\n",
        "If a Git command is named this option will bring up the manual page for that command."
      ]
    }
  ],
  "info": {
    "completion_info": {
      "url": "https://git-scm.com",
      "description": [
        "Git - Version control system."
      ]
    }
  },
  "config": [
    {
      "name": "max_commit",
      "value": 20,
      "values": [
        -1,
        20
      ],
      "tip": [
        "{{",
        "$_value = $PSCompletions.config.comp_config.git.max_commit;",
        "if($_value -ne $null){ \"Current Value: <@Magenta>$_value<@Blue>`n\" }",
        "}}",
        "The maximum number that can be parsed for a project commit by the hooks. Default to <@Magenta>20<@Blue>.\n",
        "If it is <@Magenta>-1<@Blue>, all commits will be parsed, which may affect the loading speed."
      ]
    }
  ]
}
